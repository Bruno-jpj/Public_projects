def handle_buysubscription(self, request: HttpRequest, user_id):
        data_inizio = timezone.now()
        partenza = request.POST.get('stazione_partenza')
        arrivo = request.POST.get('stazione_arrivo')
        data_fine_str = request.POST.get('data')
        n_passeggeri = request.POST.get('numero_passeggeri')
        classe_vagone = request.POST.get('classe')

        try:
            data_fine = datetime.strptime(data_fine_str, '%Y-%m-%d')
        except ValueError:
            messages.error(request, "Formato data non valido.")
            return self.get(request)

        tratta = Tratta.objects.filter(
            stazione_partenza=partenza,
            stazione_arrivo=arrivo
        ).first()
        if not tratta:
            messages.error(request, "Tratta non trovata.")
            return self.get(request)

        treni_partenza = Trenostazione.objects.filter(stazione_id=partenza).values_list('treno_id', flat=True)
        treni_arrivo = Trenostazione.objects.filter(stazione_id=arrivo).values_list('treno_id', flat=True)
        treni_comuni = set(treni_partenza).intersection(treni_arrivo)

        if not treni_comuni:
            messages.error(request, "Nessun treno disponibile.")
            return self.get(request)

        treno_id = list(treni_comuni)[0]

        Bigliettoabbonamento.objects.create(
            data_acquisto=data_inizio,
            data_inizio=data_inizio,
            data_fine=data_fine,
            prezzo=0.0,
            classe_vagone=classe_vagone,
            numero_passeggeri=n_passeggeri,
            utente_id=user_id,
            treno_id=treno_id,
            tratta_id=tratta.id
        )

        messages.success(request, "Abbonamento acquistato con successo.")
        return redirect('account')

    def handle_buyticket(self, request: HttpRequest, user_id):
        data_acquisto = timezone.now()

        # 1. Dati dal form
        partenza = request.POST.get('stazione_partenza')
        arrivo = request.POST.get('stazione_arrivo')
        data_viaggio_str = request.POST.get('data')  # nome input HTML: <input type="date" name="data">
        n_passeggeri = request.POST.get('numero_passeggeri')
        classe_vagone = request.POST.get('classe')

        # 2. Parsing data viaggio
        try:
            data_viaggio = datetime.strptime(data_viaggio_str, '%Y-%m-%d')
        except ValueError:
            messages.error(request, "Data del viaggio non valida.")
            return self.get(request)

        # 3. Trova la tratta tra le stazioni
        tratta = Tratta.objects.filter(
            stazione_partenza=partenza,
            stazione_arrivo=arrivo
        ).first()

        if not tratta:
            messages.error(request, "Tratta non trovata.")
            return self.get(request)

        # 4. Trova un treno disponibile sulla tratta
        treni_partenza = Trenostazione.objects.filter(stazione_id=partenza).values_list('treno_id', flat=True)
        treni_arrivo = Trenostazione.objects.filter(stazione_id=arrivo).values_list('treno_id', flat=True)
        treni_comuni = set(treni_partenza).intersection(treni_arrivo)

        if not treni_comuni:
            messages.error(request, "Nessun treno disponibile per questa tratta.")
            return self.get(request)

        treno_id = list(treni_comuni)[0]  # seleziona il primo treno disponibile

        # 5. Crea il biglietto (viaggio singolo: data_inizio = data_fine)
        Bigliettoabbonamento.objects.create(
            data_acquisto=data_acquisto,
            data_inizio=data_viaggio,
            data_fine=data_viaggio,
            prezzo=00.00,  # prezzo fittizio, puoi calcolarlo dinamicamente
            classe_vagone=classe_vagone,
            numero_passeggeri=n_passeggeri,
            utente_id=user_id,
            treno_id=treno_id,
            tratta_id=tratta.id
        )

        messages.success(request, "Biglietto acquistato con successo.")
        return redirect('account')